
(function () {
Raphael.fn.freeTransform = function(subject, options, callback) {
	// Enable method chaining
	if ( subject.freeTransform ) { return subject.freeTransform; }

	// Add Array.map if the browser doesn't support it
	if ( !Array.prototype.hasOwnProperty('map') ) {
		Array.prototype.map = function(callback, arg) {
			var i, mapped = [];

			for ( i in this ) {
				if ( this.hasOwnProperty(i) ) { mapped[i] = callback.call(arg, this[i], i, this); }
			}

			return mapped;
		};
	}

	// Add Array.indexOf if not builtin
	if ( !Array.prototype.hasOwnProperty('indexOf') ) {
		Array.prototype.indexOf = function(obj, start) {
			for ( var i = (start || 0), j = this.length; i < j; i++ ) {
				if ( this[i] === obj ) { return i; }
			}
			return -1;
		}
	}

	var
		paper = this,
		bbox  = subject.getBBox(true)
		;

	var nb = subject.freeTransform = {
		// Keep track of transformations
		attrs: {
			x: bbox.x,
			y: bbox.y,
			size: { x: bbox.width, y: bbox.height },
			center: { x: bbox.x + bbox.width  / 2, y: bbox.y + bbox.height / 2 },
			rotate: 0,
			scale: { x: 1, y: 1 },
			translate: { x: 0, y: 0 },
			ratio: 1  //按比例
			},
		axes: null,
		bbox: null,
		callback: null,
		items: [],
		handles: { center: null, x: null, y: null },
		offset: {
			rotate: 0,
			scale: { x: 1.1, y: 1.1 }, //helper距离本体的距离
			translate: { x: 0, y: 0 }
			},
		opts: {
			animate: false,
			attrs: { fill: '#F00', stroke: '#000' }, //helper point的颜色
			boundary: { x: paper._lenb || 0, y: paper._top || 0, width: paper.width, height: paper.height },
			distance: 1.6, //旋转圆距离本体的距离,按比例
			drag: true,
			draw: 'bbox',// 外框
			keepRatio: true,
			range: { rotate: [ -180, 180 ], scale: [ -99999, 99999 ] },
			rotate: true,
			scale: ['bboxCorners'],
			snap: { rotate: 0, scale: 0, drag: 0 },  //旋转
			snapDist: { rotate: 0 , scale: 0, drag: 7 },
			size: 5 //helper8个角的大小
			},
		subject: subject
		};

	/**
	 * Update handles based on the element's transformations
	 */
	nb.updateHandles = function() {
		if ( nb.handles.bbox || nb.opts.rotate.indexOf('self') >= 0 ) {
			var corners = getBBox();
		}

		// Get the element's rotation
		var rad = {
			x: ( nb.attrs.rotate      ) * Math.PI / 180,
			y: ( nb.attrs.rotate + 90 ) * Math.PI / 180
			};

		var radius = {
			x: nb.attrs.size.x / 2 * nb.attrs.scale.x,
			y: nb.attrs.size.y / 2 * nb.attrs.scale.y
			};

		nb.axes.map(function(axis) {
            if ( nb.handles[axis] ) {
                if(axis == 'x') {  //只画x轴的坐标
                var
                    cx = nb.attrs.center.x + nb.attrs.translate.x + radius[axis] * nb.opts.distance * Math.cos(rad[axis]),
                    cy = nb.attrs.center.y + nb.attrs.translate.y + radius[axis] * nb.opts.distance * Math.sin(rad[axis])
                    ;

                //Keep handle within boundaries
                //边界处理
                /*if ( nb.opts.boundary ) {
                    cx = Math.max(Math.min(cx, nb.opts.boundary.x + nb.opts.boundary.width),  nb.opts.boundary.x);
                    cy = Math.max(Math.min(cy, nb.opts.boundary.y + nb.opts.boundary.height), nb.opts.boundary.y);
                }*/

                nb.handles[axis].disc.attr({ cx: cx, cy: cy });

                nb.handles[axis].line.toFront().attr({
                    path: [ [ 'M', nb.attrs.center.x + nb.attrs.translate.x, nb.attrs.center.y + nb.attrs.translate.y ], [ 'L', nb.handles[axis].disc.attrs.cx, nb.handles[axis].disc.attrs.cy ] ]
                    });

                nb.handles[axis].disc.toFront();
            
            } 
            }
		});

		if ( nb.bbox ) {
			nb.bbox.toFront().attr({
				path: [
					[ 'M', corners[0].x, corners[0].y ],
					[ 'L', corners[1].x, corners[1].y ],
					[ 'L', corners[2].x, corners[2].y ],
					[ 'L', corners[3].x, corners[3].y ],
					[ 'L', corners[0].x, corners[0].y ]
					]
				});

			// Allowed x, y scaling directions for bbox handles
			var bboxHandleDirection = [
				[ -1, -1 ], [ 1, -1 ], [ 1, 1 ], [ -1, 1 ],
				[  0, -1 ], [ 1,  0 ], [ 0, 1 ], [ -1, 0 ]
				];

			if ( nb.handles.bbox ) {
				nb.handles.bbox.map(function (handle, i) {
					var cx, cy, j, k;

					if ( handle.isCorner ) {
						cx = corners[i].x;
						cy = corners[i].y;
					} else {
						j  = i % 4;
						k  = ( j + 1 ) % corners.length;
						cx = ( corners[j].x + corners[k].x ) / 2;
						cy = ( corners[j].y + corners[k].y ) / 2;
					}

					handle.element.toFront()
						.attr({
							x: cx - ( handle.isCorner ? nb.opts.size.bboxCorners : nb.opts.size.bboxSides ),
							y: cy - ( handle.isCorner ? nb.opts.size.bboxCorners : nb.opts.size.bboxSides )
							})
						.transform('R' + nb.attrs.rotate)
						;

					handle.x = bboxHandleDirection[i][0];
					handle.y = bboxHandleDirection[i][1];
				});
			}
		}

		if ( nb.circle ) {
			nb.circle.attr({
				cx: nb.attrs.center.x + nb.attrs.translate.x,
				cy: nb.attrs.center.y + nb.attrs.translate.y,
				r:  Math.max(radius.x, radius.y) * nb.opts.distance
				});
		}

		if ( nb.handles.center ) {
			nb.handles.center.disc.toFront().attr({
				cx: nb.attrs.center.x + nb.attrs.translate.x,
				cy: nb.attrs.center.y + nb.attrs.translate.y
				});
		}

		if ( nb.opts.rotate.indexOf('self') >= 0 ) {
			radius = Math.max(
				Math.sqrt(Math.pow(corners[1].x - corners[0].x, 2) + Math.pow(corners[1].y - corners[0].y, 2)),
				Math.sqrt(Math.pow(corners[2].x - corners[1].x, 2) + Math.pow(corners[2].y - corners[1].y, 2))
				) / 2;
		}

		return nb;
	};

	/**
	 * Add handles
	 */
	nb.showHandles = function() {
		nb.hideHandles();

		nb.axes.map(function(axis) {
			nb.handles[axis] = {};

			nb.handles[axis].line = paper
				.path([ 'M', nb.attrs.center.x, nb.attrs.center.y ])
				.attr({
					stroke: nb.opts.attrs.stroke,
					'stroke-dasharray': '- ',
					opacity: .5,
					})
				;

			nb.handles[axis].disc = paper
				.circle(nb.attrs.center.x, nb.attrs.center.y, nb.opts.size.axes)
				.attr(nb.opts.attrs)
				;
		});

		if ( nb.opts.draw.indexOf('bbox') >= 0 ) {
			nb.bbox = paper
				.path('')
				.attr({
					stroke: nb.opts.attrs.stroke,
					'stroke-dasharray': '- ',
					opacity: .5
					})
				;

			nb.handles.bbox = [];

			var i, handle;
              //8个corner
			for ( i = 0; i < 8; i ++ ) {
				handle = {};

				handle.axis     = i % 2 ? 'x' : 'y';
				handle.isCorner = i < 4; //是否是4个角，scale以这个为圆心

				handle.element = paper
					.rect(nb.attrs.center.x, nb.attrs.center.y, nb.opts.size[handle.isCorner ? 'bboxCorners' : 'bboxSides' ] * 2, nb.opts.size[handle.isCorner ? 'bboxCorners' : 'bboxSides' ] * 2)
					.attr(nb.opts.attrs)
					;

				nb.handles.bbox[i] = handle;
			}
		}
        //BBox的样式，圆
		/*if ( nb.opts.draw.indexOf('circle') !== -1 ) {
			nb.circle = paper
				.circle(0, 0, 0)
				.attr({
					stroke: nb.opts.attrs.stroke,
					'stroke-dasharray': '- ',
					opacity: .3
					})
				;
		}*/

		if ( nb.opts.drag.indexOf('center') !== -1 ) {
			nb.handles.center = {};

			nb.handles.center.disc = paper
				.circle(nb.attrs.center.x, nb.attrs.center.y, nb.opts.size.center)
				.attr(nb.opts.attrs)
				;
		}

		// Drag x, y handles
		nb.axes.map(function(axis) {
			if ( !nb.handles[axis] ) { return; }

			var
				rotate = nb.opts.rotate.indexOf('axis' + axis.toUpperCase()) !== -1,
				scale  = nb.opts.scale .indexOf('axis' + axis.toUpperCase()) !== -1
				;

			nb.handles[axis].disc.drag(function(dx, dy) {
				// viewBox might be scaled
				if ( nb.o.viewBoxRatio ) {
					dx *= nb.o.viewBoxRatio.x;
					dy *= nb.o.viewBoxRatio.y;
				}

				var
					cx = dx + nb.handles[axis].disc.ox,
					cy = dy + nb.handles[axis].disc.oy
					;

				var mirrored = {
					x: nb.o.scale.x < 0,
					y: nb.o.scale.y < 0
					};

				if ( rotate ) {
					var rad = Math.atan2(cy - nb.o.center.y - nb.o.translate.y, cx - nb.o.center.x - nb.o.translate.x);

					nb.attrs.rotate = rad * 180 / Math.PI - ( axis === 'y' ? 90 : 0 );

					if ( mirrored[axis] ) { nb.attrs.rotate -= 180; }
				}

				// Keep handle within boundaries
				if ( nb.opts.boundary ) {
					cx = Math.max(Math.min(cx, nb.opts.boundary.x + nb.opts.boundary.width),  nb.opts.boundary.x);
					cy = Math.max(Math.min(cy, nb.opts.boundary.y + nb.opts.boundary.height), nb.opts.boundary.y);
				}

				var radius = Math.sqrt(Math.pow(cx - nb.o.center.x - nb.o.translate.x, 2) + Math.pow(cy - nb.o.center.y - nb.o.translate.y, 2));

				if ( scale ) {
					nb.attrs.scale[axis] = radius / ( nb.o.size[axis] / 2 * nb.opts.distance );

					if ( mirrored[axis] ) { nb.attrs.scale[axis] *= -1; }
				}

				applyLimits();

				// Maintain aspect ratio
				if ( nb.opts.keepRatio.indexOf('axis' + axis.toUpperCase()) !== -1 ) {
					keepRatio(axis);
				} else {
					nb.attrs.ratio = nb.attrs.scale.x / nb.attrs.scale.y;
				}

				if ( nb.attrs.scale.x && nb.attrs.scale.y ) { nb.apply(); }

				asyncCallback([ rotate ? 'rotate' : null, scale ? 'scale' : null ]);
			}, function() {
				// Offset values
				nb.o = cloneObj(nb.attrs);

				if ( paper._viewBox ) {
					nb.o.viewBoxRatio = {
						x: paper._viewBox[2] / paper.width,
						y: paper._viewBox[3] / paper.height
						};
				}

				nb.handles[axis].disc.ox = this.attrs.cx;
				nb.handles[axis].disc.oy = this.attrs.cy;

				asyncCallback([ rotate ? 'rotate start' : null, scale ? 'scale start' : null ]);
			}, function() {
				asyncCallback([ rotate ? 'rotate end'   : null, scale ? 'scale end'   : null ]);
			});
		});

		// Drag bbox handles
		// 拖动物体时，handle的更新
		if ( nb.opts.draw.indexOf('bbox') >= 0 && ( nb.opts.scale.indexOf('bboxCorners') !== -1 || nb.opts.scale.indexOf('bboxSides') !== -1 ) ) {
			nb.handles.bbox.map(function(handle) {
				handle.element.drag(function(dx, dy) {
					// viewBox might be scaled
                    if ( nb.o.viewBoxRatio ) {
                        dx *= nb.o.viewBoxRatio.x;
                        dy *= nb.o.viewBoxRatio.y;
                    }

					var
						sin, cos, rx, ry, rdx, rdy, mx, my, sx, sy,
						previous = cloneObj(nb.attrs)
						;

					sin = nb.o.rotate.sin;
					cos = nb.o.rotate.cos;

					// Maintain aspect ratio
					if ( handle.isCorner && nb.opts.keepRatio.indexOf('bboxCorners') !== -1 ) {
						dx = ( handle.axis === 'x' ? -dy : dy ) * ( ( ( cos + sin ) < 0 || ( cos - sin ) < 0 ) ? -1 : 1 ) * ( ( nb.attrs.size.x * nb.attrs.scale.x ) / ( nb.attrs.size.y * nb.attrs.scale.y ) );
					}
matrix(sx, 0, 0, sy, cx-sx*cx, cy-sy*cy)
					// First rotate dx, dy to element alignment
					rx = dx * cos - dy * sin;
					ry = dx * sin + dy * cos;

					rx *= Math.abs(handle.x);
					ry *= Math.abs(handle.y);

					// And finally rotate back to canvas alignment
					rdx = rx *   cos + ry * sin;
					rdy = rx * - sin + ry * cos;

					nb.attrs.translate = {
						x: nb.o.translate.x + rdx / 2,
						y: nb.o.translate.y + rdy / 2
						};

					// Mouse position, relative to element center anber translation
					mx = nb.o.handlePos.cx + dx - nb.attrs.center.x - nb.attrs.translate.x;
					my = nb.o.handlePos.cy + dy - nb.attrs.center.y - nb.attrs.translate.y;

					// Position rotated to align with element
					rx = mx * cos - my * sin;
					ry = mx * sin + my * cos;

					// Scale element so that handle is at mouse position
					sx = rx * 2 * handle.x / nb.o.size.x;
					sy = ry * 2 * handle.y / nb.o.size.y;

					nb.attrs.scale = {
						x: sx || nb.attrs.scale.x,
						y: sy || nb.attrs.scale.y
						};

					// Check boundaries
					if ( !isWithinBoundaries().x || !isWithinBoundaries().y ) { nb.attrs = previous; }

					applyLimits();

					// Maintain aspect ratio
					if ( ( handle.isCorner && nb.opts.keepRatio.indexOf('bboxCorners') !== -1 ) || ( !handle.isCorner && nb.opts.keepRatio.indexOf('bboxSides') !== -1 ) ) {
						keepRatio(handle.axis);

						var trans = {
							x: ( nb.attrs.scale.x - nb.o.scale.x ) * nb.o.size.x * handle.x,
							y: ( nb.attrs.scale.y - nb.o.scale.y ) * nb.o.size.y * handle.y
							};

						rx =   trans.x * cos + trans.y * sin;
						ry = - trans.x * sin + trans.y * cos;

						nb.attrs.translate.x = nb.o.translate.x + rx / 2;
						nb.attrs.translate.y = nb.o.translate.y + ry / 2;
					}

					nb.attrs.ratio = nb.attrs.scale.x / nb.attrs.scale.y;

					nb.apply();

					asyncCallback([ 'scale' ]);
				}, function() {
					var
						rotate = ( ( 360 - nb.attrs.rotate ) % 360 ) / 180 * Math.PI,
						handlePos = handle.element.attr(['x', 'y']);

					// Offset values
					nb.o = cloneObj(nb.attrs);

					nb.o.handlePos = {
						cx: handlePos.x + nb.opts.size[handle.isCorner ? 'bboxCorners' : 'bboxSides'],
						cy: handlePos.y + nb.opts.size[handle.isCorner ? 'bboxCorners' : 'bboxSides']
						};

					// Pre-compute rotation sin & cos for efficiency
					nb.o.rotate = {
						sin: Math.sin(rotate),
						cos: Math.cos(rotate)
						};

					if ( paper._viewBox ) {
						nb.o.viewBoxRatio = {
							x: paper._viewBox[2] / paper.width,
							y: paper._viewBox[3] / paper.height
						};
					}
                    
					asyncCallback([ 'scale start' ]);
				}, function() {
					asyncCallback([ 'scale end'   ]);
				});
			});
		}

		// Drag element and center handle
		var draggables = [];

		if ( nb.opts.drag.indexOf('self')   >= 0 && nb.opts.scale.indexOf('self') === -1 && nb.opts.rotate.indexOf('self') === -1 ) { draggables.push(subject); }
		if ( nb.opts.drag.indexOf('center') >= 0 ) { draggables.push(nb.handles.center.disc); }

		draggables.map(function(draggable) {
			draggable.drag(function(dx, dy) {
				// viewBox might be scaled
				if ( nb.o.viewBoxRatio ) {
					dx *= nb.o.viewBoxRatio.x;
					dy *= nb.o.viewBoxRatio.y;
				}

				nb.attrs.translate.x = nb.o.translate.x + dx;
				nb.attrs.translate.y = nb.o.translate.y + dy;

				var bbox = cloneObj(nb.o.bbox);

				bbox.x += dx;
				bbox.y += dy;

				applyLimits(bbox);

				nb.apply();

				asyncCallback([ 'drag' ]);
			}, function() {
				// Offset values
				nb.o = cloneObj(nb.attrs);

				if ( nb.opts.snap.drag ) { nb.o.bbox = subject.getBBox(); }

				// viewBox might be scaled
				if ( paper._viewBox ) {
					nb.o.viewBoxRatio = {
						x: paper._viewBox[2] / paper.width,
						y: paper._viewBox[3] / paper.height
						};
				}

				nb.axes.map(function(axis) {
					if ( nb.handles[axis] ) {
						nb.handles[axis].disc.ox = nb.handles[axis].disc.attrs.cx;
						nb.handles[axis].disc.oy = nb.handles[axis].disc.attrs.cy;
					}
				});

				asyncCallback([ 'drag start' ]);
			}, function() {
				asyncCallback([ 'drag end'   ]);
			});
		});

		var
			rotate = nb.opts.rotate.indexOf('self') >= 0,
			scale  = nb.opts.scale .indexOf('self') >= 0
			;

		if ( rotate || scale ) {
			subject.drag(function(dx, dy, x, y) {
				if ( rotate ) {
					var rad = Math.atan2(y - nb.o.center.y - nb.o.translate.y, x - nb.o.center.x - nb.o.translate.x);

					nb.attrs.rotate = nb.o.rotate + ( rad * 180 / Math.PI ) - nb.o.deg;
				}

				var mirrored = {
					x: nb.o.scale.x < 0,
					y: nb.o.scale.y < 0
					};

				if ( scale ) {
					var radius = Math.sqrt(Math.pow(x - nb.o.center.x - nb.o.translate.x, 2) + Math.pow(y - nb.o.center.y - nb.o.translate.y, 2));

					nb.attrs.scale.x = nb.attrs.scale.y = ( mirrored.x ? -1 : 1 ) * nb.o.scale.x + ( radius - nb.o.radius ) / ( nb.o.size.x / 2 );

					if ( mirrored.x ) { nb.attrs.scale.x *= -1; }
					if ( mirrored.y ) { nb.attrs.scale.y *= -1; }
				}

				applyLimits();

				nb.apply();

				asyncCallback([ rotate ? 'rotate' : null, scale ? 'scale' : null ]);
			}, function(x, y) {
				// Offset values
				nb.o = cloneObj(nb.attrs);

				nb.o.deg = Math.atan2(y - nb.o.center.y - nb.o.translate.y, x - nb.o.center.x - nb.o.translate.x) * 180 / Math.PI;

				nb.o.radius = Math.sqrt(Math.pow(x - nb.o.center.x - nb.o.translate.x, 2) + Math.pow(y - nb.o.center.y - nb.o.translate.y, 2));

				// viewBox might be scaled
				if ( paper._viewBox ) {
					nb.o.viewBoxRatio = {
						x: paper._viewBox[2] / paper.width,
						y: paper._viewBox[3] / paper.height
						};
				}

				asyncCallback([ rotate ? 'rotate start' : null, scale ? 'scale start' : null ]);
			}, function() {
				asyncCallback([ rotate ? 'rotate end'   : null, scale ? 'scale end'   : null ]);
			});
		}

		nb.updateHandles();

		return nb;
	};

	/**
	 * Remove handles
	 */
	nb.hideHandles = function() {
		nb.items.map(function(item) {
			item.el.undrag();
		});

		if ( nb.handles.center ) {
			nb.handles.center.disc.remove();

			nb.handles.center = null;
		}

		[ 'x', 'y' ].map(function(axis) {
			if ( nb.handles[axis] ) {
				nb.handles[axis].disc.remove();
				nb.handles[axis].line.remove();

				nb.handles[axis] = null;
			}
		});

		if ( nb.bbox ) {
			nb.bbox.remove();

			nb.bbox = null;

			if ( nb.handles.bbox ) {
				nb.handles.bbox.map(function(handle) {
					handle.element.remove();
				});

				nb.handles.bbox = null;
			}
		}

		if ( nb.circle ) {
			nb.circle.remove();

			nb.circle = null;
		}

		return nb;
	};

	// Override defaults
	nb.setOpts = function(options, callback) {
		nb.callback = typeof callback === 'function' ? callback : false;

		var i, j;

		for ( i in options ) {
			if ( options[i] && options[i].constructor === Object ) {
				for ( j in options[i] ) {
					if ( options[i].hasOwnProperty(j) ) {
						nb.opts[i][j] = options[i][j];
					}
				}
			} else {
				nb.opts[i] = options[i];
			}
		}

		if ( nb.opts.animate   === true ) { nb.opts.animate   = { delay:   700, easing: 'linear' }; }
		if ( nb.opts.drag      === true ) { nb.opts.drag      = [ 'center', 'self' ]; }
		if ( nb.opts.keepRatio === true ) { nb.opts.keepRatio = [ 'bboxCorners', 'bboxSides' ]; }
		if ( nb.opts.rotate    === true ) { nb.opts.rotate    = [ 'axisX', 'axisY' ]; }
		if ( nb.opts.scale     === true ) { nb.opts.scale     = [ 'axisX', 'axisY', 'bboxCorners', 'bboxSides' ]; }

		[ 'drag', 'draw', 'keepRatio', 'rotate', 'scale' ].map(function(option) {
			if ( nb.opts[option] === false ) { nb.opts[option] = []; }
		});

		nb.axes = [];

		if ( nb.opts.rotate.indexOf('axisX') >= 0 || nb.opts.scale.indexOf('axisX') >= 0 ) { nb.axes.push('x'); }
		if ( nb.opts.rotate.indexOf('axisY') >= 0 || nb.opts.scale.indexOf('axisY') >= 0 ) { nb.axes.push('y'); }

		[ 'drag', 'rotate', 'scale' ].map(function(option) {
			if ( !nb.opts.snapDist[option] ) { nb.opts.snapDist[option] = nb.opts.snap[option]; }
		});

		// Force numbers
		nb.opts.range = {
			rotate: [ parseFloat(nb.opts.range.rotate[0]), parseFloat(nb.opts.range.rotate[1]) ],
			scale:  [ parseFloat(nb.opts.range.scale[0]),  parseFloat(nb.opts.range.scale[1])  ]
			};

		nb.opts.snap = {
			drag:   parseFloat(nb.opts.snap.drag),
			rotate: parseFloat(nb.opts.snap.rotate),
			scale:  parseFloat(nb.opts.snap.scale)
			};

		nb.opts.snapDist = {
			drag:   parseFloat(nb.opts.snapDist.drag),
			rotate: parseFloat(nb.opts.snapDist.rotate),
			scale:  parseFloat(nb.opts.snapDist.scale)
			};

		if ( typeof nb.opts.size === 'string' ) {
			nb.opts.size = parseFloat(nb.opts.size);
		}

		if ( !isNaN(nb.opts.size) ) {
			nb.opts.size = {
				axes:        nb.opts.size,
				bboxCorners: nb.opts.size,
				bboxSides:   nb.opts.size,
				center:      nb.opts.size
				};
		}

		nb.showHandles();

		asyncCallback([ 'init' ]);

		return nb;
	};

	nb.setOpts(options, callback);

	/**
	 * Apply transformations, optionally update attributes manually
	 */
	nb.apply = function() {
		nb.items.map(function(item, i) {
			// Take offset values into account
			var
				center = {
					x: nb.attrs.center.x + nb.offset.translate.x,
					y: nb.attrs.center.y + nb.offset.translate.y
				},
				rotate    = nb.attrs.rotate - nb.offset.rotate,
				scale     = {
					x: nb.attrs.scale.x / nb.offset.scale.x,
					y: nb.attrs.scale.y / nb.offset.scale.y
				},
				translate = {
					x: nb.attrs.translate.x - nb.offset.translate.x,
					y: nb.attrs.translate.y - nb.offset.translate.y
				};

			if ( nb.opts.animate ) {
				asyncCallback([ 'animate start' ]);

				item.el.animate(
					{ transform: [
						'R', rotate, center.x, center.y,
						'S', scale.x, scale.y, center.x, center.y,
						'T', translate.x, translate.y
						] + nb.items[i].transformString },
					nb.opts.animate.delay,
					nb.opts.animate.easing,
					function() {
						asyncCallback([ 'animate end' ]);

						nb.updateHandles();
					}
				);
			} else {
				item.el.transform([
					'R', rotate, center.x, center.y,
					'S', scale.x, scale.y, center.x, center.y,
					'T', translate.x, translate.y
					] + nb.items[i].transformString);

				asyncCallback([ 'apply' ]);

				nb.updateHandles();
			}
		});

		return nb;
	};

	/**
	 * Clean exit
	 */
	nb.unplug = function() {
		var attrs = nb.attrs;

		nb.hideHandles();

		// Goodbye
		delete subject.freeTransform;

		return attrs;
	};

	// Store attributes for each item
	function scan(subject) {
		( subject.type === 'set' ? subject.items : [ subject ] ).map(function(item) {
			if ( item.type === 'set' ) {
				scan(item);
			} else {
				nb.items.push({
					el: item,
					attrs: {
						rotate:    0,
						scale:     { x: 1, y: 1 },
						translate: { x: 0, y: 0 }
						},
					transformString: item.matrix.toTransformString()
					});
			}
		});
	}

	scan(subject);

	// Get the current transform values for each item
	nb.items.map(function(item, i) {
		if ( item.el._ && item.el._.transform && typeof item.el._.transform === 'object' ) {
			item.el._.transform.map(function(transform) {
				if ( transform[0] ) {
					switch ( transform[0].toUpperCase() ) {
						case 'T':
							nb.items[i].attrs.translate.x += transform[1];
							nb.items[i].attrs.translate.y += transform[2];

							break;
						case 'S':
							nb.items[i].attrs.scale.x *= transform[1];
							nb.items[i].attrs.scale.y *= transform[2];

							break;
						case 'R':
							nb.items[i].attrs.rotate += transform[1];

							break;
					}
				}
			});
		}
	});

	// If subject is not of type set, the first item _is_ the subject
	if ( subject.type !== 'set' ) {
		nb.attrs.rotate    = nb.items[0].attrs.rotate;
		nb.attrs.scale     = nb.items[0].attrs.scale;
		nb.attrs.translate = nb.items[0].attrs.translate;

		nb.items[0].attrs = {
			rotate:    0,
			scale:     { x: 1, y: 1 },
			translate: { x: 0, y: 0 }
			};

		nb.items[0].transformString = '';
	}

	nb.attrs.ratio = nb.attrs.scale.x / nb.attrs.scale.y;

	/**
	 * Get rotated bounding box
	 */
	function getBBox() {
		var rad = {
			x: ( nb.attrs.rotate      ) * Math.PI / 180,
			y: ( nb.attrs.rotate + 90 ) * Math.PI / 180
			};

		var radius = {
			x: nb.attrs.size.x / 2 * nb.attrs.scale.x,
			y: nb.attrs.size.y / 2 * nb.attrs.scale.y
			};

		var
			corners = [],
			signs   = [ { x: -1, y: -1 }, { x: 1, y: -1 }, { x: 1, y: 1 }, { x: -1, y: 1 } ]
			;

		signs.map(function(sign) {
			corners.push({
				x: ( nb.attrs.center.x + nb.attrs.translate.x + sign.x * radius.x * Math.cos(rad.x) ) + sign.y * radius.y * Math.cos(rad.y),
				y: ( nb.attrs.center.y + nb.attrs.translate.y + sign.x * radius.x * Math.sin(rad.x) ) + sign.y * radius.y * Math.sin(rad.y)
				});
		});

		return corners;
	}

	/**
	 * Apply limits
	 */
	function applyLimits(bbox) {
		// Snap to grid
		if ( bbox && nb.opts.snap.drag ) {
			var
				x    = bbox.x,
				y    = bbox.y,
				dist = { x: 0, y: 0 },
				snap = { x: 0, y: 0 }
				;

			[ 0, 1 ].map(function() {
				// Top and lenb sides first
				dist.x = x - Math.round(x / nb.opts.snap.drag) * nb.opts.snap.drag;
				dist.y = y - Math.round(y / nb.opts.snap.drag) * nb.opts.snap.drag;

				if ( Math.abs(dist.x) <= nb.opts.snapDist.drag ) { snap.x = dist.x; }
				if ( Math.abs(dist.y) <= nb.opts.snapDist.drag ) { snap.y = dist.y; }

				// Repeat for bottom and right sides
				x += bbox.width  - snap.x;
				y += bbox.height - snap.y;
			});

			nb.attrs.translate.x -= snap.x;
			nb.attrs.translate.y -= snap.y;
		}

		// Keep center within boundaries
		if ( nb.opts.boundary ) {
			var b = nb.opts.boundary;

			if ( nb.attrs.center.x + nb.attrs.translate.x < b.x            ) { nb.attrs.translate.x += b.x -            ( nb.attrs.center.x + nb.attrs.translate.x ); }
			if ( nb.attrs.center.y + nb.attrs.translate.y < b.y            ) { nb.attrs.translate.y += b.y -            ( nb.attrs.center.y + nb.attrs.translate.y ); }
			if ( nb.attrs.center.x + nb.attrs.translate.x > b.x + b.width  ) { nb.attrs.translate.x += b.x + b.width  - ( nb.attrs.center.x + nb.attrs.translate.x ); }
			if ( nb.attrs.center.y + nb.attrs.translate.y > b.y + b.height ) { nb.attrs.translate.y += b.y + b.height - ( nb.attrs.center.y + nb.attrs.translate.y ); }
		}

		// Snap to angle, rotate with increments
		dist = Math.abs(nb.attrs.rotate % nb.opts.snap.rotate);
		dist = Math.min(dist, nb.opts.snap.rotate - dist);

		if ( dist < nb.opts.snapDist.rotate ) {
			nb.attrs.rotate = Math.round(nb.attrs.rotate / nb.opts.snap.rotate) * nb.opts.snap.rotate;
		}

		// Snap to scale, scale with increments
		dist = {
			x: Math.abs(( nb.attrs.scale.x * nb.attrs.size.x ) % nb.opts.snap.scale),
			y: Math.abs(( nb.attrs.scale.y * nb.attrs.size.x ) % nb.opts.snap.scale)
			};

		dist = {
			x: Math.min(dist.x, nb.opts.snap.scale - dist.x),
			y: Math.min(dist.y, nb.opts.snap.scale - dist.y)
			};

		if ( dist.x < nb.opts.snapDist.scale ) {
			nb.attrs.scale.x = Math.round(nb.attrs.scale.x * nb.attrs.size.x / nb.opts.snap.scale) * nb.opts.snap.scale / nb.attrs.size.x;
		}

		if ( dist.y < nb.opts.snapDist.scale ) {
			nb.attrs.scale.y = Math.round(nb.attrs.scale.y * nb.attrs.size.y / nb.opts.snap.scale) * nb.opts.snap.scale / nb.attrs.size.y;
		}

		// Limit range of rotation
		if ( nb.opts.range.rotate ) {
			var deg = ( 360 + nb.attrs.rotate ) % 360;

			if ( deg > 180 ) { deg -= 360; }

			if ( deg < nb.opts.range.rotate[0] ) { nb.attrs.rotate += nb.opts.range.rotate[0] - deg; }
			if ( deg > nb.opts.range.rotate[1] ) { nb.attrs.rotate += nb.opts.range.rotate[1] - deg; }
		}

		// Limit scale
		if ( nb.opts.range.scale ) {
			if ( nb.attrs.scale.x * nb.attrs.size.x < nb.opts.range.scale[0] ) {
				nb.attrs.scale.x = nb.opts.range.scale[0] / nb.attrs.size.x;
			}

			if ( nb.attrs.scale.y * nb.attrs.size.y < nb.opts.range.scale[0] ) {
				nb.attrs.scale.y = nb.opts.range.scale[0] / nb.attrs.size.y;
			}

			if ( nb.attrs.scale.x * nb.attrs.size.x > nb.opts.range.scale[1] ) {
				nb.attrs.scale.x = nb.opts.range.scale[1] / nb.attrs.size.x;
			}

			if ( nb.attrs.scale.y * nb.attrs.size.y > nb.opts.range.scale[1] ) {
				nb.attrs.scale.y = nb.opts.range.scale[1] / nb.attrs.size.y;
			}
		}
	}

	function isWithinBoundaries() {
		return {
			x: nb.attrs.scale.x * nb.attrs.size.x >= nb.opts.range.scale[0] && nb.attrs.scale.x * nb.attrs.size.x <= nb.opts.range.scale[1],
			y: nb.attrs.scale.y * nb.attrs.size.y >= nb.opts.range.scale[0] && nb.attrs.scale.y * nb.attrs.size.y <= nb.opts.range.scale[1]
			};
	}

	function keepRatio(axis) {
		if ( axis === 'x' ) {
			nb.attrs.scale.y = nb.attrs.scale.x / nb.attrs.ratio;
		} else {
			nb.attrs.scale.x = nb.attrs.scale.y * nb.attrs.ratio;
		}
	}

	/**
	 * Recursive copy of object
	 */
	function cloneObj(obj) {
		var i, clone = {};

		for ( i in obj ) {
			clone[i] = typeof obj[i] === 'object' ? cloneObj(obj[i]) : obj[i];
		}

		return clone;
	}

	var timeout = false;

	/**
	 * Call callback asynchronously for better performance
	 */
	function asyncCallback(e) {
		if ( nb.callback ) {
			// Remove empty values
			var events = [];

			e.map(function(e, i) { if ( e ) { events.push(e); } });

			clearTimeout(timeout);

			setTimeout(function() { if ( nb.callback ) { nb.callback(nb, events); } }, 1);
		}
	}

	nb.updateHandles();

	// Enable method chaining
	return nb;
};

})()
